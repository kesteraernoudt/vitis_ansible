---
# Include Variables ##########

- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}-family.yml"

- name: Include Distribution version specific variables
  include_vars: "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"

- name: set facts based on defaults
  set_fact:
    "{{ item[8:] }}": "{{  vars[item[8:]] | default(vars[item]) }}"
  when: item is match("^default_")
  with_items:
    "{{ vars }}"

##########

- name: debug info
  debug:
    msg: "desktop is {{ vnc_desktop }} and server is {{ vnc_server }}"

- name: fix test-kitchen
  file:
    path: /tmp/kitchen
    state: directory
    recurse: true
    mode: 0775

- name: fix Ubuntu 17.10 bug, 1
  package:
    name: network-manager
    state: present
    update_cache: yes
  when:
    - ansible_distribution_version is version_compare('17.10', '==')

- name: fix Ubuntu 17.10 bug, 2
  service:
    name: NetworkManager
    state: started
  when:
    - ansible_distribution_version is version_compare('17.10', '==')

- name: add customization for xfce4 RH
  include: xfce-rh.yml
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version == "8"
    - vnc_desktop == "xfce4"

- name: install general packages
  package:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items: "{{ vnc_general_packages }}"

- name: install desktop packages
  package:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items: "{{ vnc_desktop_packages[vnc_desktop] }}"

- name: install vnc_server packages
  package:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items: "{{ vnc_server_packages[vnc_server] }}"

#Tigervnc must be downloaded for Ubuntu 16
- name: Create downloads dir
  file:
    path: "/opt/downloads"
    state: directory
    mode: 0755

- name: Download tigervnc
  get_url:
    url: "{{ vnc_tiger_url }}"
    dest: "/opt/downloads"
  when:
    - ansible_distribution == "Ubuntu"
    - vnc_server == "tigervnc"
    - ansible_distribution_major_version == "16"

- name: install tigervnc
  shell: apt install "/opt/downloads/{{ vnc_tiger_file }}" # noqa 305
  when:
    - ansible_distribution == "Ubuntu"
    - vnc_server == "tigervnc"
    - ansible_distribution_major_version == "16"

- name: Create .vnc dirs
  file:
    path: "/home/{{ item.username }}/.vnc"
    state: directory
    mode: 0755
    owner: "{{ item.username }}"
    group: "{{ item.usergroup | default(item.username) }}"
  with_items: "{{ vnc_users }}"

- name: checking existence of xstartup files
  stat:
    path: "/home/{{ item.username }}/.vnc/xstartup"
  register: checkxstartup
  with_items: "{{ vnc_users }}"

- name: Update "xstartup" file
  template:
    src: xstartup.j2
    dest: "/home/{{ item.item.username }}/.vnc/xstartup"
    mode: 0755
    owner: "{{ item.item.username }}"
    group: "{{ item.item.usergroup | default(item.item.username) }}"
  when:
    - vnc_ansible_managed_xstartup or not item.stat.exists
  with_items: "{{ checkxstartup.results }}"

#the file .dmrc is currently for Redhat/Centos
- name: checking existence of .dmrc files
  stat:
    path: "/home/{{ item.username }}/.dmrc"
  register: checkdmrc
  with_items: "{{ vnc_users }}"

- name: Update .dmrc file
  template:
    src: dmrc.j2
    dest: "/home/{{ item.item.username }}/.dmrc"
    mode: 0755
    owner: "{{ item.item.username }}"
    group: "{{ item.item.usergroup | default(item.item.username) }}"
  when:
    - vnc_ansible_managed_xstartup or not item.stat.exists
  with_items: "{{ checkdmrc.results }}"

- name: Set vnc passwords tightvnc
  shell: |
    set -o pipefail
    echo {{ item.vnc_default_password }} | vncpasswd -f > /home/{{ item.username }}/.vnc/passwd
  args:
    chdir: "/home/{{ item.username }}/.vnc"
    creates: "/home/{{ item.username }}/.vnc/passwd"
    executable: /bin/bash
  with_items: "{{ vnc_users }}"
  when: vnc_server == "tightvnc"

- name: Set vnc passwords vnc4server, tigervnc
  shell: |
    set -o pipefail
    printf "{{ item.vnc_default_password }}\n{{ item.vnc_default_password }}\n\n" | vncpasswd -f > /home/{{ item.username }}/.vnc/passwd
  args:
    chdir: "/home/{{ item.username }}/.vnc"
    creates: "/home/{{ item.username }}/.vnc/passwd"
    executable: /bin/bash
  with_items: "{{ vnc_users }}"
  when: vnc_server == "vnc4server" or vnc_server == "tigervnc"

- name: Set perms on vnc passwords
  file:
    path: "/home/{{ item.username }}/.vnc/passwd"
    owner: "{{ item.username }}"
    group: "{{ item.usergroup | default(item.username) }}"
    mode: 0700
  with_items: "{{ vnc_users }}"

- name: include systemd auto-start services
  include: systemd.yml
  when: vnc_install_systemd_services

- name: include basic shell scripts to start services
  include: nonsystemd.yml
  when: not vnc_install_systemd_services

- name: Update firewall on CentOS
  vars:
     port_nr: "{{ item.vnc_num + 5900 }}"
  firewalld:
    port: "{{port_nr}}/tcp"
    permanent: yes
    state: enabled
  when:
    - ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'
    - vnc_client_only_localhost == False
  with_items: "{{ vnc_users }}"
